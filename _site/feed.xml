

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Dev</title>
  <subtitle></subtitle>
  <updated>2023-09-18T22:38:38+09:00</updated>
  <author>
    <name>최기랑</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 최기랑 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>React 19장 - Cmarket props drilling</title>
    <link href="http://localhost:4000/posts/4-React-Cmarket/" rel="alternate" type="text/html" title="React 19장 - Cmarket props drilling" />
    <published>2023-02-23T00:00:00+09:00</published>
  
    <updated>2023-02-23T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/4-React-Cmarket/</id>
    <content src="http://localhost:4000/posts/4-React-Cmarket/" />
    <author>
      <name>admin</name>
    </author>

  
    
    <category term="REACT" />
    
  

  
    <summary>
      





      React

  장바구니에 상품을 추가하거나 삭제하고,props를 활용하여 총 주문 금액의 상태값이 바뀌는 기능을 구현한다.


state.js

  state 파일에 임의의 값을 작성해 놓는다.


export const initialState = {
    "items": [
        {
            "id" : 1,
            "name" : "노른자 분리기",
            "img" : "../images/egg.png",
            "price" : 9900
        },
        {
            "id" : 2,
            "name" : "2020년 달력",
            "img" : "../images/2...
    </summary>
  

  </entry>

  
  <entry>
    <title>React 18장 - 상태관리</title>
    <link href="http://localhost:4000/posts/3-React-Redux-%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC/" rel="alternate" type="text/html" title="React 18장 - 상태관리" />
    <published>2023-02-23T00:00:00+09:00</published>
  
    <updated>2023-02-23T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/3-React-Redux-%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC/</id>
    <content src="http://localhost:4000/posts/3-React-Redux-%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC/" />
    <author>
      <name>admin</name>
    </author>

  
    
    <category term="REACT" />
    
  

  
    <summary>
      





      React
상태

  프론트엔드 개발에서 UI에 동적으로 표현될 데이터를 말한다.
  예를 들어, 쇼핑몰의 장바구니 안에는 상품의 선택 여부, 선택한 상품의 수량, 장바구니에 담긴 물품, 선택한 물품에 따른 주문 금액 등이 변할 수 있는 상태이다.
  상태에 따라 어떤 화면이 영향을 받고, 이 화면을 컴포넌트로 분리하여 컴포넌트가 서로 어떠한 상태를 공유하고 주고받는다.


예시

  상태는 크게 두 가지로 나눌 수 있는데, 특정 컴포넌트 안에서만 관리되는 로컬상태, 전체 혹은 여러 가지 컴포넌트가 동시에 관리하는 전역 상태가 있다.
    
      장바구니 예시
      로컬 상태의 예시는 선택한 수량이 있다.
        
          원래 가격에 상태를 곱해 컴포넌트 내에 표시만 해주...
    </summary>
  

  </entry>

  
  <entry>
    <title>Algorithm 5장 - 시간복잡도와 공간복잡도</title>
    <link href="http://localhost:4000/posts/2-Algorithm-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EC%99%80-%EA%B3%B5%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84/" rel="alternate" type="text/html" title="Algorithm 5장 - 시간복잡도와 공간복잡도" />
    <published>2023-02-23T00:00:00+09:00</published>
  
    <updated>2023-02-23T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/2-Algorithm-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EC%99%80-%EA%B3%B5%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84/</id>
    <content src="http://localhost:4000/posts/2-Algorithm-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EC%99%80-%EA%B3%B5%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84/" />
    <author>
      <name>admin</name>
    </author>

  
    
    <category term="ALGORITHM" />
    
  

  
    <summary>
      





      Algorithm
알고리즘의 성능 평가

  어떤 알고리즘이 있을 때, 알고리즘의 성능을 평가하기 위해 사용하는 척도이다.
  그 중 시간 복잡도와 공간 복잡도가 있는데, 동일한 기능을 수행하는 알고리즘이 있을 때 복잡도가 낮을 수록 좋은 알고리즘이라고 한다.
    
      시간 복잡도 : 특정한 크기의 입력에 대한 알고리즘의 수행 시간 분석
      공간 복잡도 : 특정한 크기의 입력에 대한 알고리즘의 메모리 사용량 분석
    
  


시간 복잡도

  시간 복잡도는 특정 알고리즘이 어떤 문제를 해결하는 데 걸리는 시간을 의미한다.
  같은 결과를 갖는 프로그래밍도 작성 방법에 따라 걸리는 시간이 다르며, 시간이 적게 걸리는 것이 좋다.


빅-오 표기법

  시간 복잡도에는 빅-오 표기법...
    </summary>
  

  </entry>

  
  <entry>
    <title>Programers 1장 - Lv.0 외계어 사전</title>
    <link href="http://localhost:4000/posts/1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-Lv.0-%EC%99%B8%EA%B3%84%EC%96%B4-%EC%82%AC%EC%A0%84/" rel="alternate" type="text/html" title="Programers 1장 - Lv.0 외계어 사전" />
    <published>2023-02-23T00:00:00+09:00</published>
  
    <updated>2023-02-23T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-Lv.0-%EC%99%B8%EA%B3%84%EC%96%B4-%EC%82%AC%EC%A0%84/</id>
    <content src="http://localhost:4000/posts/1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-Lv.0-%EC%99%B8%EA%B3%84%EC%96%B4-%EC%82%AC%EC%A0%84/" />
    <author>
      <name>admin</name>
    </author>

  
    
    <category term="PROGRAMERS" />
    
  

  
    <summary>
      





      외계어 사전
문제

  PROGRAMMERS-962 행성에 불시착한 우주비행사 머쓱이는 외계행성의 언어를 공부하려고 합니다.
  알파벳이 담긴 배열 spell과 외계어 사전 dic이 매개변수로 주어집니다.
  spell에 담긴 알파벳을 한번씩만 모두 사용한 단어가 dic에 존재한다면 1, 존재하지 않는다면 2를 return하도록 solution 함수를 완성해주세요.


function solution(spell, dic) {
    
}


제한사항

  spell과 dic의 원소는 알파벳 소문자로만 이루어져있습니다.
  2 ≤ spell의 크기 ≤ 10
  spell의 원소의 길이는 1입니다.
  1 ≤ dic의 크기 ≤ 10
  1 ≤ dic의 원소의 길이 ≤ 10
  spell의 원소를 모두 사용...
    </summary>
  

  </entry>

  
  <entry>
    <title>React 17장 - ClickToEdit 기능</title>
    <link href="http://localhost:4000/posts/3-React-styled-component-ClickToEdit/" rel="alternate" type="text/html" title="React 17장 - ClickToEdit 기능" />
    <published>2023-02-22T00:00:00+09:00</published>
  
    <updated>2023-02-22T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/3-React-styled-component-ClickToEdit/</id>
    <content src="http://localhost:4000/posts/3-React-styled-component-ClickToEdit/" />
    <author>
      <name>admin</name>
    </author>

  
    
    <category term="REACT" />
    
  

  
    <summary>
      





      React
ClickToEdit

  값을 입력했을 때에 정해진 요소의 값을 입력한 값으로 바꿔주는 기능 구현


컴포넌트 짜기

  입력할 컴포넌트와 입력을 출력할 컴포넌트로 나눈다.
  나머지는 styled-component로 감싸준다.


return (
    &amp;lt;&amp;gt;
        &amp;lt;InputView&amp;gt;
            &amp;lt;MyInput /&amp;gt;
        &amp;lt;/InputView&amp;gt;
        &amp;lt;InputView&amp;gt;
            &amp;lt;MyInput /&amp;gt;
        &amp;lt;/InputView&amp;gt;
        &amp;lt;InputView&amp;gt;
            &amp;lt;MyInput /&amp;gt;
        &amp;lt;/Inp...
    </summary>
  

  </entry>

</feed>


